# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_ddpm_miniai.ipynb.

# %% auto 0
__all__ = ['AccelerateCB']

# %% ../nbs/03_ddpm_miniai.ipynb 3
import pickle,gzip,math,os,time,shutil,torch,random,logging
import fastcore.all as fc,matplotlib as mpl,numpy as np,matplotlib.pyplot as plt
from collections.abc import Mapping
from pathlib import Path
from functools import partial
from types import SimpleNamespace

from fastcore.foundation import L
import torchvision.transforms.functional as TF,torch.nn.functional as F
from torch import tensor,nn,optim
from torch.utils.data import DataLoader,default_collate
from torch.nn import init
from torch.optim import lr_scheduler

from miniai.datasets import *
from miniai.conv import *
from miniai.learner import *
from miniai.activations import *
from miniai.init import *
from miniai.sgd import *
from miniai.resnet import *
from miniai.augment import *

# %% ../nbs/03_ddpm_miniai.ipynb 28
from accelerate import Accelerator

# %% ../nbs/03_ddpm_miniai.ipynb 29
class AccelerateCB(TrainCB):
    order = DeviceCB.order+10
    def __init__(self, n_inp=1, mixed_precision="fp16"):
        super().__init__(n_inp=n_inp)
        self.acc = Accelerator(mixed_precision=mixed_precision)
        
    def before_fit(self, learn):
        learn.model,learn.opt,learn.dls.train,learn.dls.valid = self.acc.prepare(
            learn.model, learn.opt, learn.dls.train, learn.dls.valid)
    
    def after_fit(self, learn):
        learn.model = self.acc.unwrap_model(learn.model)
    
    def backward(self, learn): self.acc.backward(learn.loss)
